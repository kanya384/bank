pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        KEYCLOAK_ACCOUNTS_SECRET = credentials('KEYCLOAK_ACCOUNTS_SECRET')
        KEYCLOAK_BLOCKER_SECRET = credentials('KEYCLOAK_BLOCKER_SECRET')
        KEYCLOAK_CASH_SECRET = credentials('KEYCLOAK_CASH_SECRET')
        KEYCLOAK_EXCHANGE_SECRET = credentials('KEYCLOAK_EXCHANGE_SECRET')
        KEYCLOAK_NOTIFICATIONS_SECRET = credentials('KEYCLOAK_NOTIFICATIONS_SECRET')
        KEYCLOAK_TRANSFER_SECRET = credentials('KEYCLOAK_TRANSFER_SECRET')

    }

    stages {
        stage('Build & Unit Tests') {
            steps {
                sh 'mvn clean install -pl exchange -am'
                sh 'mvn clean install -am' //install чтобы сгенерились стабы spring-contract для тестов
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG} accounts
                docker build -t ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG} blocker
                docker build -t ${DOCKER_REGISTRY}/cash:${IMAGE_TAG} cash
                docker build -t ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG} exchange
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} exchange-generator
                docker build -t ${DOCKER_REGISTRY}/front:${IMAGE_TAG} front
                docker build -t ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG} notifications
                docker build -t ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG} transfer
                docker build -t ${DOCKER_REGISTRY}/oauth2-proxy:${IMAGE_TAG} oauth2-proxy
                docker build -t ${DOCKER_REGISTRY}/streams:${IMAGE_TAG} streams
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_HUB_PASSWORD')]) {
                    sh """
                    echo \$DOCKER_HUB_PASSWORD | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/oauth2-proxy:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/streams:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Helm Deploy monitoring') {
            steps {
                sh """
                helm install monitoring monitoring/. --namespace monitoring --create-namespace
                helm upgrade monitoring monitoring/. --namespace monitoring --set kibana.enabled=true
                kubectl -n monitoring apply -f jenkins/jobs/create-elasticuser-job.yaml
                kubectl -n monitoring apply -f jenkins/jobs/elastic-mappings-job.yaml
                """
            }
        }

        stage('Manual Approval for Deploy to TEST') {
            steps {
                input message: 'Deploy to TEST environment?', ok: 'Yes, deploy'
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install bank-app bank-app/. \\
                                     --namespace test --create-namespace \\
                                     --set main-db.auth.password=${DB_PASSWORD} \\
                                     --set accounts.image.repository=${DOCKER_REGISTRY}/accounts \\
                                     --set accounts.image.tag=${IMAGE_TAG} \\
                                     --set streams.image.repository=${DOCKER_REGISTRY}/streams \\
                                     --set streams.image.tag=${IMAGE_TAG} \\
                                     --set oauth2proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                                     --set oauth2proxy.image.tag=${IMAGE_TAG} \\
                                     --set oauth2proxy.config.clients[0].clientId=accounts \\
                                     --set oauth2proxy.config.clients[0].clientSecret=${KEYCLOAK_ACCOUNTS_SECRET} \\
                                     --set oauth2proxy.config.clients[0].upstream="http://{{ .Release.Name }}-accounts:9000" \\
                                     --set oauth2proxy.config.clients[1].clientId=blocker \\
                                     --set oauth2proxy.config.clients[1].clientSecret=${KEYCLOAK_BLOCKER_SECRET} \\
                                     --set oauth2proxy.config.clients[1].upstream="http://{{ .Release.Name }}-blocker:9010" \\
                                     --set oauth2proxy.config.clients[2].clientId=exchange \\
                                     --set oauth2proxy.config.clients[2].clientSecret=${KEYCLOAK_EXCHANGE_SECRET} \\
                                     --set oauth2proxy.config.clients[2].upstream="http://{{ .Release.Name }}-exchange:9010" \\
                                     --set oauth2proxy.config.clients[3].clientId=notifications \\
                                     --set oauth2proxy.config.clients[3].clientSecret=${KEYCLOAK_NOTIFICATIONS_SECRET} \\
                                     --set oauth2proxy.config.clients[3].upstream="http://{{ .Release.Name }}-notifications:9020" \\
                                     --set oauth2proxy.config.clients[4].clientId=cash \\
                                     --set oauth2proxy.config.clients[4].clientSecret=${KEYCLOAK_CASH_SECRET} \\
                                     --set oauth2proxy.config.clients[4].upstream="http://{{ .Release.Name }}-cash:9050" \\
                                     --set oauth2proxy.config.clients[5].clientId=transfer \\
                                     --set oauth2proxy.config.clients[5].clientSecret=${KEYCLOAK_TRANSFER_SECRET} \\
                                     --set oauth2proxy.config.clients[5].upstream="http://{{ .Release.Name }}-transfer:9090" \\
                                     --set blocker.image.repository=${DOCKER_REGISTRY}/blocker \\
                                     --set blocker.image.tag=${IMAGE_TAG} \\
                                     --set cash.image.repository=${DOCKER_REGISTRY}/cash \\
                                     --set cash.image.tag=${IMAGE_TAG} \\
                                     --set exchange.image.repository=${DOCKER_REGISTRY}/exchange \\
                                     --set exchange.image.tag=${IMAGE_TAG} \\
                                     --set notifications.image.repository=${DOCKER_REGISTRY}/notifications \\
                                     --set notifications.image.tag=${IMAGE_TAG} \\
                                     --set transfer.image.repository=${DOCKER_REGISTRY}/transfer \\
                                     --set transfer.image.tag=${IMAGE_TAG} \\
                                     --set exchangegenerator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                                     --set exchangegenerator.image.tag=${IMAGE_TAG} \\
                                     --set front.image.repository=${DOCKER_REGISTRY}/front \\
                                     --set front.image.tag=${IMAGE_TAG} \\
                                     --set front.ingress.hosts[0].host=main.test.local \\
                                     --set front.ingress.hosts[0].paths[0].path="/" \\
                                     --set front.ingress.hosts[0].paths[0].pathType="Prefix"

                kubectl -n test delete deploy bank-app-cash
                kubectl -n test delete deploy bank-app-transfer
                kubectl -n test delete deploy bank-app-exchange
                kubectl -n test delete deploy bank-app-exchangegenerator
                kubectl -n test delete deploy bank-app-blocker
                kubectl -n test delete deploy bank-app-notifications
                kubectl -n test delete deploy bank-app-streams
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install bank-app bank-app/. \\
                                     --namespace prod --create-namespace \\
                                     --set main-db.auth.password=${DB_PASSWORD} \\
                                     --set accounts.image.repository=${DOCKER_REGISTRY}/accounts \\
                                     --set accounts.image.tag=${IMAGE_TAG} \\
                                     --set streams.image.repository=${DOCKER_REGISTRY}/streams \\
                                     --set streams.image.tag=${IMAGE_TAG} \\
                                     --set oauth2proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                                     --set oauth2proxy.image.tag=${IMAGE_TAG} \\
                                     --set oauth2proxy.config.clients[0].clientId=accounts \\
                                     --set oauth2proxy.config.clients[0].clientSecret=${KEYCLOAK_ACCOUNTS_SECRET} \\
                                     --set oauth2proxy.config.clients[0].upstream="http://{{ .Release.Name }}-accounts:9000" \\
                                     --set oauth2proxy.config.clients[1].clientId=blocker \\
                                     --set oauth2proxy.config.clients[1].clientSecret=${KEYCLOAK_BLOCKER_SECRET} \\
                                     --set oauth2proxy.config.clients[1].upstream="http://{{ .Release.Name }}-blocker:9010" \\
                                     --set oauth2proxy.config.clients[2].clientId=exchange \\
                                     --set oauth2proxy.config.clients[2].clientSecret=${KEYCLOAK_EXCHANGE_SECRET} \\
                                     --set oauth2proxy.config.clients[2].upstream="http://{{ .Release.Name }}-exchange:9010" \\
                                     --set oauth2proxy.config.clients[3].clientId=notifications \\
                                     --set oauth2proxy.config.clients[3].clientSecret=${KEYCLOAK_NOTIFICATIONS_SECRET} \\
                                     --set oauth2proxy.config.clients[3].upstream="http://{{ .Release.Name }}-notifications:9020" \\
                                     --set oauth2proxy.config.clients[4].clientId=cash \\
                                     --set oauth2proxy.config.clients[4].clientSecret=${KEYCLOAK_CASH_SECRET} \\
                                     --set oauth2proxy.config.clients[4].upstream="http://{{ .Release.Name }}-cash:9050" \\
                                     --set oauth2proxy.config.clients[5].clientId=transfer \\
                                     --set oauth2proxy.config.clients[5].clientSecret=${KEYCLOAK_TRANSFER_SECRET} \\
                                     --set oauth2proxy.config.clients[5].upstream="http://{{ .Release.Name }}-transfer:9090" \\
                                     --set blocker.image.repository=${DOCKER_REGISTRY}/blocker \\
                                     --set blocker.image.tag=${IMAGE_TAG} \\
                                     --set cash.image.repository=${DOCKER_REGISTRY}/cash \\
                                     --set cash.image.tag=${IMAGE_TAG} \\
                                     --set exchange.image.repository=${DOCKER_REGISTRY}/exchange \\
                                     --set exchange.image.tag=${IMAGE_TAG} \\
                                     --set notifications.image.repository=${DOCKER_REGISTRY}/notifications \\
                                     --set notifications.image.tag=${IMAGE_TAG} \\
                                     --set transfer.image.repository=${DOCKER_REGISTRY}/transfer \\
                                     --set transfer.image.tag=${IMAGE_TAG} \\
                                     --set exchangegenerator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                                     --set exchangegenerator.image.tag=${IMAGE_TAG} \\
                                     --set front.image.repository=${DOCKER_REGISTRY}/front \\
                                     --set front.image.tag=${IMAGE_TAG} \\
                					 --set front.ingress.hosts[0].host=main.prod.local \\
                					 --set front.ingress.hosts[0].paths[0].path="/" \\
                                     --set front.ingress.hosts[0].paths[0].pathType="Prefix"
                """
            }
        }

    }
}