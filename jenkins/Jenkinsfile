pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
        KEYCLOAK_ACCOUNTS_SECRET = credentials('KEYCLOAK_ACCOUNTS_SECRET')
        KEYCLOAK_BLOCKER_SECRET = credentials('KEYCLOAK_BLOCKER_SECRET')
        KEYCLOAK_CASH_SECRET = credentials('KEYCLOAK_CASH_SECRET')
        KEYCLOAK_EXCHANGE_SECRET = credentials('KEYCLOAK_EXCHANGE_SECRET')
        KEYCLOAK_NOTIFICATIONS_SECRET = credentials('KEYCLOAK_NOTIFICATIONS_SECRET')
        KEYCLOAK_TRANSFER_SECRET = credentials('KEYCLOAK_TRANSFER_SECRET')

    }

    stages {
        stage('Build & Unit Tests') {
            steps {
                sh 'mvn clean install -pl exchange'
                sh 'mvn clean install -am' //install чтобы сгенерились стабы spring-contract для тестов
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG} accounts
                docker build -t ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG} blocker
                docker build -t ${DOCKER_REGISTRY}/cash:${IMAGE_TAG} cash
                docker build -t ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG} exchange
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} exchange-generator
                docker build -t ${DOCKER_REGISTRY}/front:${IMAGE_TAG} front
                docker build -t ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG} notifications
                docker build -t ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG} transfer
                docker build -t ${DOCKER_REGISTRY}/oauth2-proxy:${IMAGE_TAG} oauth2-proxy
                docker build -t ${DOCKER_REGISTRY}/streams:${IMAGE_TAG} streams
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_HUB_PASSWORD')]) {
                    sh """
                    echo \$DOCKER_HUB_PASSWORD | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/oauth2-proxy:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/streams:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install bank-app bank-app/. \\
                                     --namespace test --create-namespace \\
                                     --set main-db.auth.password=${DB_PASSWORD} \\
                					 --set accounts.image.repository=${DOCKER_REGISTRY}/accounts \\
                					 --set accounts.image.tag=${IMAGE_TAG} \\
                					 --set accounts-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set accounts-proxy.image.tag=${IMAGE_TAG} \\
                					 --set accounts-proxy.config.clientSecret=${KEYCLOAK_ACCOUNTS_SECRET} \\
                					 --set blocker.image.repository=${DOCKER_REGISTRY}/blocker \\
                					 --set blocker.image.tag=${IMAGE_TAG} \\
                					 --set blocker-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set blocker-proxy.image.tag=${IMAGE_TAG} \\
                					 --set blocker-proxy.config.clientSecret=${KEYCLOAK_BLOCKER_SECRET} \\
                					 --set cash.image.repository=${DOCKER_REGISTRY}/cash \\
                					 --set cash.image.tag=${IMAGE_TAG} \\
                					 --set cash-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set cash-proxy.image.tag=${IMAGE_TAG} \\
                					 --set cash-proxy.config.clientSecret=${KEYCLOAK_CASH_SECRET} \\
                					 --set exchange.image.repository=${DOCKER_REGISTRY}/exchange \\
                					 --set exchange.image.tag=${IMAGE_TAG} \\
                					 --set exchange-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set exchange-proxy.image.tag=${IMAGE_TAG} \\
                					 --set exchange-proxy.config.clientSecret=${KEYCLOAK_EXCHANGE_SECRET} \\
                					 --set notifications.image.repository=${DOCKER_REGISTRY}/notifications \\
                					 --set notifications.image.tag=${IMAGE_TAG} \\
                					 --set notifications-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set notifications-proxy.image.tag=${IMAGE_TAG} \\
                					 --set notifications-proxy.config.clientSecret=${KEYCLOAK_NOTIFICATIONS_SECRET} \\
                                     --set transfer.image.repository=${DOCKER_REGISTRY}/transfer \\
                                     --set transfer.image.tag=${IMAGE_TAG} \\
                                     --set transfer-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                                     --set transfer-proxy.image.tag=${IMAGE_TAG} \\
                                     --set transfer-proxy.config.clientSecret=${KEYCLOAK_TRANSFER_SECRET} \\
                					 --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                					 --set exchange-generator.image.tag=${IMAGE_TAG} \\
                					 --set front.image.repository=${DOCKER_REGISTRY}/front \\
                					 --set front.image.tag=${IMAGE_TAG} \\
                					 --set front.ingress.hosts[0].host=main.test.local \\
                					 --set front.ingress.hosts[0].paths[0].path="/" \\
                                     --set front.ingress.hosts[0].paths[0].pathType="Prefix"
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install bank-app bank-app/. \\
                                     --namespace prod --create-namespace \\
                                     --set main-db.auth.password=${DB_PASSWORD} \\
                					 --set accounts.image.repository=${DOCKER_REGISTRY}/accounts \\
                					 --set accounts.image.tag=${IMAGE_TAG} \\
                					 --set accounts-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set accounts-proxy.image.tag=${IMAGE_TAG} \\
                					 --set accounts-proxy.config.clientSecret=${KEYCLOAK_ACCOUNTS_SECRET} \\
                					 --set blocker.image.repository=${DOCKER_REGISTRY}/blocker \\
                					 --set blocker.image.tag=${IMAGE_TAG} \\
                					 --set blocker-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set blocker-proxy.image.tag=${IMAGE_TAG} \\
                					 --set blocker-proxy.config.clientSecret=${KEYCLOAK_BLOCKER_SECRET} \\
                					 --set cash.image.repository=${DOCKER_REGISTRY}/cash \\
                					 --set cash.image.tag=${IMAGE_TAG} \\
                					 --set cash-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set cash-proxy.image.tag=${IMAGE_TAG} \\
                					 --set cash-proxy.config.clientSecret=${KEYCLOAK_CASH_SECRET} \\
                					 --set exchange.image.repository=${DOCKER_REGISTRY}/exchange \\
                					 --set exchange.image.tag=${IMAGE_TAG} \\
                					 --set exchange-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set exchange-proxy.image.tag=${IMAGE_TAG} \\
                					 --set exchange-proxy.config.clientSecret=${KEYCLOAK_EXCHANGE_SECRET} \\
                					 --set notifications.image.repository=${DOCKER_REGISTRY}/notifications \\
                					 --set notifications.image.tag=${IMAGE_TAG} \\
                					 --set notifications-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                					 --set notifications-proxy.image.tag=${IMAGE_TAG} \\
                					 --set notifications-proxy.config.clientSecret=${KEYCLOAK_NOTIFICATIONS_SECRET} \\
                                     --set transfer.image.repository=${DOCKER_REGISTRY}/transfer \\
                                     --set transfer.image.tag=${IMAGE_TAG} \\
                                     --set transfer-proxy.image.repository=${DOCKER_REGISTRY}/oauth2-proxy \\
                                     --set transfer-proxy.image.tag=${IMAGE_TAG} \\
                                     --set transfer-proxy.config.clientSecret=${KEYCLOAK_TRANSFER_SECRET} \\
                					 --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                					 --set exchange-generator.image.tag=${IMAGE_TAG} \\
                					 --set front.image.repository=${DOCKER_REGISTRY}/front \\
                					 --set front.image.tag=${IMAGE_TAG} \\
                					 --set front.ingress.hosts[0].host=main.prod.local \\
                					 --set front.ingress.hosts[0].paths[0].path="/" \\
                                     --set front.ingress.hosts[0].paths[0].pathType="Prefix"
                """
            }
        }
    }
}