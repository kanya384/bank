pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'mydb'
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Accounts Service') {
                    steps {
                        dir('accounts') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Blocker Service') {
                    steps {
                        dir('blocker') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Cash Service') {
                    steps {
                        dir('cash') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Exchange Service') {
                    steps {
                        dir('exchange') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Exchange Generator Service') {
                    steps {
                        dir('exchange-generator') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Front Service') {
                    steps {
                        dir('front') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Notifications Service') {
                    steps {
                        dir('notifications') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('Transfer Service') {
                    steps {
                        dir('transfer') {
                            sh 'mvn clean test'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG} accounts
                docker build -t ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG} blocker
                docker build -t ${DOCKER_REGISTRY}/cash:${IMAGE_TAG} cash
                docker build -t ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG} exchange
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} exchange-generator
                docker build -t ${DOCKER_REGISTRY}/front:${IMAGE_TAG} front
                docker build -t ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG} notifications
                docker build -t ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG} transfer
                docker build -t ${DOCKER_REGISTRY}/oauth2-proxy:${IMAGE_TAG} oauth2-proxy
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_HUB_PASSWORD')]) {
                    sh """
                    echo \$DOCKER_HUB_PASSWORD | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notifications:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Install PostgreSQL to TEST') {
            steps {
                sh """
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update

                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace test --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl create secret generic test-main-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-accounts-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_ACCOUNTS_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-blocker-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_BLOCKER_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-cash-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_CASH_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-exchange-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_EXCHANGE_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-notifications-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_NOTIFICATIONS_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic test-cash-proxy \\
                  --from-literal=clientSecret=${KEYCLOAK_CASH_SECRET} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -

                """
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install accounts bank-app/charts/accounts \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/accounts \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install blocker bank-app/charts/blocker \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/blocker \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install cash bank-app/charts/cash \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/cash \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install exchange bank-app/charts/exchange \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install exchange-generator bank-app/charts/exchange-generator \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install front bank-app/charts/front \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/front \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install notifications bank-app/charts/notifications \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/notifications \\
                  --set image.tag=${IMAGE_TAG}

                helm upgrade --install transfer bank-app/charts/transfer \\
                  --namespace test --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/transfer \\
                  --set image.tag=${IMAGE_TAG}
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Install PostgreSQL to PROD') {
            steps {
                sh """
                helm upgrade --install postgres bitnami/postgresql \\
                  --namespace prod --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl create secret generic customer-service-customer-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -

                kubectl create secret generic order-service-order-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }

        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/customer-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=customer.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install order-service my-microservices-app/charts/order-service \\
                  --namespace prod --create-namespace \\
                  --set image.repository=${DOCKER_REGISTRY}/order-service \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=order.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
            }
        }
    }
}