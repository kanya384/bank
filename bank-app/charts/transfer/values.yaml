replicaCount: 1

image:
  repository: transfer
  pullPolicy: IfNotPresent
  tag: "0.0.1-SNAPSHOT"

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }

service:
  type: ClusterIP
  port: 9090

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: transfer.test.local
      paths:
        - path: /
          pathType: Prefix
  tls: [ ]

resources: { }

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: { }

tolerations: [ ]

affinity: { }

config:
  kafka_url: "http://{{ .Release.Namespace }}-kafka.svc.cluster.local:9092"
  database_url: "postgresql://postgres-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/transfer"
  database_username: "transfer"
  keycloak_url: "http://{{ .Release.Namespace }}-keycloak.svc.cluster.local:80"
  gateway_url: "http://ingress-nginx-controller.ingress-nginx"